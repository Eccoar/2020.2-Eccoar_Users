stages:
  - code
  - tests
  - quality scan
  - quality metrics
  - build
  - build chart
  - deploy

.only_branches: &only_branches
  only:
    - /^(\d{2,})(\_[a-zA-Z0-9]+)+$/
    - /^((hotfix)\_\d{2,})(\_[a-zA-Z0-9]+)+$/
    - main
    - devel
    - tags

########### Code ###########

eslint:
  image: node:14-slim
  stage: code
  before_script:
    - npm install
  script:
    - npm run lint-report
  artifacts:
    public: true
    paths:
      - lint-report.html
  extends:
    - .only_branches

########### Tests ###########

unit_test:
  image: node:14-slim
  stage: tests
  before_script:
    - npm install
    - cp $FIREBASE_SERVICE service-account.json
    - cp $FIREBASE_CLIENT firebase-account.json
  script:
    - npm run test
  artifacts:
    public: true
    paths:
      - test-report.xml
      - coverage/lcov.info
  extends:
    - .only_branches

########### Quality Scan ###########

sonar_scanner:
  image: sonarsource/sonar-scanner-cli:4.4
  stage: quality scan
  script:
    - sonar-scanner -Dproject.settings=$CI_PROJECT_DIR/sonar-project.properties -Dsonar.login=$SONAR_TOKEN
  extends:
    - .only_branches
  dependencies:
    - unit_test

sonar metrics:
  image: debian
  stage: quality metrics
  variables:
    METRICS_REPO: git@github.com:Eccoar/2020.2-Eccoar-Analytics.git
    METRICS_URL: https://sonarcloud.io/api/measures/component_tree?component=Eccoar_2020.2-Eccoar_Users&metricKeys=files,functions,complexity,comment_lines_density,duplicated_lines_density,security_rating,tests,test_success_density,test_execution_time,reliability_rating,ncloc&ps=500
  before_script:
    - apt update
    - apt install wget git -y
    - command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )
    - eval $(ssh-agent -s)
    - echo "$SSH_KEY" | tr -d '\r' | ssh-add -
    - mkdir ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - export curr_date=$(date "+%d-%m-%Y")
    - git config --global user.email "pipeline@example.com"
    - git config --global user.name "Pipeline"
  script:
    - git clone $METRICS_REPO
    - cd 2020.2-Eccoar-Analytics
    - cd users
    - wget $METRICS_URL -O fga-eps-mds-2020_2-Eccoar_Users-$curr_date.json
    - git add . && git commit -m "Add metric report for $CI_PROJECT_NAME at $curr_date"
    - git push
  only:
    - main
    - tags
    - 203_metrics_repo_ci
  artifacts:
    public: true
    paths:
      - tmp/*.json

########### Build ###########

.build_:
  image: docker:19.03.12
  services:
    - docker:19.03.12-dind
  stage: build
  before_script:
    - docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
    - export DOCKER_IMAGE=$(echo "$DOCKER_IMAGE:$DOCKER_TAG" | tr '[:upper:]' '[:lower:]')
    - cp $FIREBASE_SERVICE service-account.json
    - cp $FIREBASE_CLIENT firebase-account.json
  script:
    - docker build . -t $DOCKER_IMAGE
    - docker push $DOCKER_IMAGE
  extends:
    - .only_branches

build general:
  variables:
    DOCKER_TAG: $CI_COMMIT_SHORT_SHA
    DOCKER_IMAGE: $DOCKER_USER/$CI_PROJECT_NAME
  extends:
    - .only_branches
    - .build_

build homolog:
  variables:
    DOCKER_TAG: homolog
    DOCKER_IMAGE: $DOCKER_USER/$CI_PROJECT_NAME
  only:
    - main
    - 186_pipeline_user
  extends:
    - .build_

build prod:
  variables:
    DOCKER_TAG: $CI_COMMIT_TAG
    DOCKER_IMAGE: $DOCKER_USER/$CI_PROJECT_NAME
  only:
    - tags
  extends:
    - .build_

########## Chart ##########

.helm_build:
  stage: build chart
  image: dtzar/helm-kubectl:3.5.0
  script:
    - cd chart
    - kubectl get services -n $AMBIENTE
    - helm lint ./$CHART_NAME
    - echo $CHART_VERSION
    - helm package ./$CHART_NAME --app-version $APP_VERSION --version $CHART_VERSION
  artifacts:
    public: true
    paths:
      - chart/$CHART_NAME-$CHART_VERSION.tgz

helm hm:
  variables:
    CHART_NAME: eccoar-user
    AMBIENTE: homolog
    APP_VERSION: $CI_COMMIT_SHORT_SHA
    CHART_VERSION: 1.0.0-hm.$CI_COMMIT_REF_SLUG.$CI_COMMIT_SHORT_SHA
  only:
    - 186_pipeline_user
    - main
  extends:
    - .helm_build

helm prod:
  variables:
    CHART_NAME: eccoar-user
    AMBIENTE: prod
    APP_VERSION: $CI_COMMIT_TAG
    CHART_VERSION: $CI_COMMIT_TAG
  only:
    - tags
  extends:
    - .helm_build

########## Deploy ##########

.deploy_:
  image: dtzar/helm-kubectl:3.5.0
  stage: deploy
  before_script:
    - export CHART_PATH=chart/$CHART_NAME-$CHART_VERSION.tgz
  script:
    - kubectl get services -n $AMBIENTE
    - helm upgrade $WORKLOAD_NAME $CHART_PATH --install --namespace $AMBIENTE --set image.tag=$DOCKER_TAG

deploy hm:
  variables:
    DOCKER_TAG: homolog
    WORKLOAD_NAME: eccoar-user
    AMBIENTE: homolog
    CHART_NAME: eccoar-user
    CHART_VERSION: 1.0.0-hm.$CI_COMMIT_REF_SLUG.$CI_COMMIT_SHORT_SHA
  only:
    - 186_pipeline_user
    - main
  extends:
    - .deploy_

deploy prod:
  variables:
    DOCKER_TAG: $CI_COMMIT_TAG
    WORKLOAD_NAME: eccoar-user
    AMBIENTE: prod
    APP_VERSION: $CI_COMMIT_TAG
    CHART_NAME: eccoar-user
    CHART_VERSION: $CI_COMMIT_TAG
  only:
    - tags
  extends:
    - .deploy_